package com.frame.projectframe.module.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.frame.projectframe.module.greendao.bean.platform;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PLATFORM".
 */
public class platformDao extends AbstractDao<platform, Long> {

    public static final String TABLENAME = "PLATFORM";

    /**
     * Properties of entity platform.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChapterId = new Property(0, Long.class, "chapterId", true, "_id");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property IsVip = new Property(2, int.class, "isVip", false, "IS_VIP");
        public final static Property OrderId = new Property(3, int.class, "orderId", false, "ORDER_ID");
        public final static Property WordsCount = new Property(4, long.class, "wordsCount", false, "WORDS_COUNT");
        public final static Property SalePrice = new Property(5, double.class, "salePrice", false, "SALE_PRICE");
        public final static Property Source = new Property(6, int.class, "source", false, "SOURCE");
        public final static Property MemberId = new Property(7, String.class, "memberId", false, "MEMBER_ID");
        public final static Property BeforeLogin = new Property(8, boolean.class, "beforeLogin", false, "BEFORE_LOGIN");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property ChapterName = new Property(10, String.class, "chapterName", false, "CHAPTER_NAME");
    }


    public platformDao(DaoConfig config) {
        super(config);
    }

    public platformDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLATFORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: chapterId
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 1: bookId
                "\"IS_VIP\" INTEGER NOT NULL ," + // 2: isVip
                "\"ORDER_ID\" INTEGER NOT NULL ," + // 3: orderId
                "\"WORDS_COUNT\" INTEGER NOT NULL ," + // 4: wordsCount
                "\"SALE_PRICE\" REAL NOT NULL ," + // 5: salePrice
                "\"SOURCE\" INTEGER NOT NULL ," + // 6: source
                "\"MEMBER_ID\" TEXT," + // 7: memberId
                "\"BEFORE_LOGIN\" INTEGER NOT NULL ," + // 8: beforeLogin
                "\"PATH\" TEXT," + // 9: path
                "\"CHAPTER_NAME\" TEXT);"); // 10: chapterName
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLATFORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, platform entity) {
        stmt.clearBindings();

        Long chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindLong(1, chapterId);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getIsVip());
        stmt.bindLong(4, entity.getOrderId());
        stmt.bindLong(5, entity.getWordsCount());
        stmt.bindDouble(6, entity.getSalePrice());
        stmt.bindLong(7, entity.getSource());

        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(8, memberId);
        }
        stmt.bindLong(9, entity.getBeforeLogin() ? 1L : 0L);

        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }

        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(11, chapterName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, platform entity) {
        stmt.clearBindings();

        Long chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindLong(1, chapterId);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getIsVip());
        stmt.bindLong(4, entity.getOrderId());
        stmt.bindLong(5, entity.getWordsCount());
        stmt.bindDouble(6, entity.getSalePrice());
        stmt.bindLong(7, entity.getSource());

        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(8, memberId);
        }
        stmt.bindLong(9, entity.getBeforeLogin() ? 1L : 0L);

        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }

        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(11, chapterName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public platform readEntity(Cursor cursor, int offset) {
        platform entity = new platform( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chapterId
                cursor.getLong(offset + 1), // bookId
                cursor.getInt(offset + 2), // isVip
                cursor.getInt(offset + 3), // orderId
                cursor.getLong(offset + 4), // wordsCount
                cursor.getDouble(offset + 5), // salePrice
                cursor.getInt(offset + 6), // source
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memberId
                cursor.getShort(offset + 8) != 0, // beforeLogin
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // chapterName
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, platform entity, int offset) {
        entity.setChapterId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setIsVip(cursor.getInt(offset + 2));
        entity.setOrderId(cursor.getInt(offset + 3));
        entity.setWordsCount(cursor.getLong(offset + 4));
        entity.setSalePrice(cursor.getDouble(offset + 5));
        entity.setSource(cursor.getInt(offset + 6));
        entity.setMemberId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBeforeLogin(cursor.getShort(offset + 8) != 0);
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChapterName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    }

    @Override
    protected final Long updateKeyAfterInsert(platform entity, long rowId) {
        entity.setChapterId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(platform entity) {
        if (entity != null) {
            return entity.getChapterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(platform entity) {
        return entity.getChapterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
